@use 'sass:map';
@use 'variables' as *;
@use 'functions' as *;

// Layout
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $gap: 0, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
  @if $gap != 0 {
    gap: $gap;
  }
}

@mixin grid($columns: 1, $gap: 0) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  @if $gap != 0 {
    gap: $gap;
  }
}

@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  position: $position;
  @if $top != null {
    top: $top;
  }
  @if $right != null {
    right: $right;
  }
  @if $bottom != null {
    bottom: $bottom;
  }
  @if $left != null {
    left: $left;
  }
}

// Typography
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

@mixin text-style($size, $weight: null, $line-height: 1.5) {
  font-size: $size;
  @if $weight {
    font-weight: $weight;
  }
  line-height: $line-height;
}

// Interactive
@mixin hover {
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }
}

// Media queries
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// Helpers
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

// Transitions
@mixin transition($property: all, $duration: 0.3s, $timing: ease) {
  transition: $property $duration $timing;
}

// Section Styles
@mixin section-padding {
  padding: 60px 0;
}

@mixin section-title {
  font-weight: 600;
  font-size: font-size('h1');
  line-height: 1.5;
  text-transform: uppercase;
  text-align: center;
}

@mixin section-description {
  margin: spacing('md') auto 0;
  max-width: 300px;
  font-size: font-size('base');
  line-height: 1.5;
  text-align: center;
}

@mixin card-shadow {
  box-shadow: $shadow-default;
  transition: $transition-slow;

  &:hover {
    box-shadow: $shadow-hover;
  }
}

// Media Queries
@mixin respond-to($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// Interactive
@mixin hover {
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }
}

// Typography
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

@mixin text-style($size, $weight: null, $line-height: 1.5) {
  font-size: $size;
  @if $weight {
    font-weight: $weight;
  }
  line-height: $line-height;
}

// Effects
@mixin overlay($color, $opacity: 0.4) {
  &::after {
    @include pseudo;
    @include position(absolute, 0, 0, 0, 0);
    background: rgba($color, $opacity);
  }
}

// Animation
@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}